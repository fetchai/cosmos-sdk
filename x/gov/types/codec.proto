syntax = "proto3";
package cosmos_sdk.x.gov.v1;

import "types/types.proto";
import "third_party/proto/gogoproto/gogo.proto";
import "third_party/proto/cosmos-proto/cosmos.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/gov/types";
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = false;
option (gogoproto.goproto_getters_all) = false;

message MsgCommon {
    option (cosmos_proto.interface_type) = "github.com/cosmos/cosmos-sdk/types.Msg";
    option (gogoproto.stringer) = true;
    oneof sum {
        MsgDeposit gov_deposit = 1;
        MsgVote gov_vote = 2;
    }
}

message MsgSubmitProposalBase {
    option (gogoproto.stringer) = true;
    repeated cosmos_sdk.v1.Coin intial_deposit = 1 [(gogoproto.nullable) = false
                                                   ,(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
                                                   ,(gogoproto.moretags) = "yaml:\"initial_deposit\""];
    bytes proposer = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgDeposit defines a message to submit a deposit to an existing proposal
message MsgDeposit {
    uint64 proposal_id = 1 [(gogoproto.customname) = "ProposalID"
                           ,(gogoproto.moretags) = "yaml:\"proposal_id\""
                           ,(gogoproto.jsontag) = "proposal_id"];
    bytes depositor = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    repeated cosmos_sdk.v1.Coin amount = 3 [(gogoproto.nullable) = false,
                                           (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// VoteOption defines a vote option
enum VoteOption {
    option (gogoproto.enum_stringer) = false;
    option (gogoproto.goproto_enum_stringer) = false;
    option (gogoproto.goproto_enum_prefix) = false;
    EMPTY = 0 [(gogoproto.enumvalue_customname) = "OptionEmpty"];
    YES = 1 [(gogoproto.enumvalue_customname) = "OptionYes"];
    ABSTAIN = 2 [(gogoproto.enumvalue_customname) = "OptionAbstain"];
    NO = 3 [(gogoproto.enumvalue_customname) = "OptionNo"];
    NO_WITH_VETO = 4 [(gogoproto.enumvalue_customname) = "OptionNoWithVeto"];
}

// MsgVote defines a message to cast a vote
message MsgVote {
    uint64 proposal_id = 1 [(gogoproto.customname) = "ProposalID"
                           ,(gogoproto.moretags) = "yaml:\"proposal_id\""
                           ,(gogoproto.jsontag) = "proposal_id"];
    bytes voter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    VoteOption option = 3;
}

// TextProposal defines a standard text proposal whose changes need to be
// manually updated in case of approval
message TextProposal {
    string title = 1;
    string description = 2;
}

// Deposit defines an amount deposited by an account address to an active proposal
message Deposit {
    uint64 proposal_id = 1 [(gogoproto.customname) = "ProposalID"
                           ,(gogoproto.moretags) = "yaml:\"proposal_id\""];
    bytes depositor = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    repeated cosmos_sdk.v1.Coin amount = 3 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message ProposalBase {
    option (gogoproto.goproto_stringer) = true;
    option (gogoproto.face) = true;
    uint64 proposal_id = 1 [(gogoproto.customname) = "ProposalID"
                           ,(gogoproto.moretags) = "yaml:\"proposal_id\""];
    ProposalStatus status = 2;
    TallyResult final_tally_result = 3 [(gogoproto.nullable) = false];
    google.protobuf.Timestamp submit_time = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp deposit_end_time = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated cosmos_sdk.v1.Coin total_deposit = 6 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
    google.protobuf.Timestamp voting_start_time = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp voting_end_time = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// ProposalStatus is a type alias that represents a proposal status as a byte
enum ProposalStatus {
    option (gogoproto.enum_stringer) = false;
    option (gogoproto.goproto_enum_stringer) = false;
    option (gogoproto.goproto_enum_prefix) = false;
    NIL = 0 [(gogoproto.enumvalue_customname) = "StatusNil"];
    DEPOSIT_PERIOD = 1 [(gogoproto.enumvalue_customname) = "StatusDepositPeriod"];
    VOTING_PERIOD = 2 [(gogoproto.enumvalue_customname) = "StatusVotingPeriod"];
    PASSED = 3 [(gogoproto.enumvalue_customname) = "StatusPassed"];
    REJECTED = 4 [(gogoproto.enumvalue_customname) = "StatusRejected"];
    FAILED = 5 [(gogoproto.enumvalue_customname) = "StatusFailed"];
}

// TallyResult defines a standard tally for a proposal
message TallyResult {
    bytes yes = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    bytes abstain = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    bytes no = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    bytes no_with_veto = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false
                           ,(gogoproto.moretags) = "yaml:\"no_with_veto\""];
}

message Vote {
    uint64 proposal_id = 1 [(gogoproto.customname) = "ProposalID"
                           ,(gogoproto.moretags) = "yaml:\"proposal_id\""];
    bytes voter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    VoteOption option = 3;
}

message BasicProposal {
    ProposalBase base = 1 [(gogoproto.embed) = true];
    BasicContent content = 2;
}

message BasicContent {
    option (cosmos_proto.interface_type) = "Content";
    option (gogoproto.stringer) = true;
    oneof sum {
        TextProposal text = 1;
    }
}
