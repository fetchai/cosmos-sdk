syntax = "proto3";
package cosmos.airdrop.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/airdrop/v1beta1/airdrop.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/airdrop/types";

// Query defines the gRPC querier service.
service Query {

  // AllFunds queries all active airdrop funds
  rpc AllFunds(QueryAllFundsRequest) returns (QueryAllFundsResponse) {
    option (google.api.http).get = "/cosmos/airdrop/v1beta1/funds";
  }

  // Fund queries a specific airdrop fund
  rpc Fund(QueryFundRequest) returns (QueryFundResponse) {
    option (google.api.http).get = "/cosmos/airdrop/v1beta1/funds/{address}";
  }

  // Params queries the current modules parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/airdrop/v1beta1/params";
  }
}

// QueryAllFundsRequest defines the request for querying all the funds
message QueryAllFundsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllFundsResponse defines the response for querying all the funds
message QueryAllFundsResponse {
  repeated cosmos.airdrop.v1beta1.ActiveFund funds      = 1;
  cosmos.base.query.v1beta1.PageResponse     pagination = 2;
}

// QueryFundRequest defines the request for querying a specific fund
message QueryFundRequest {
  string address = 1 [(gogoproto.nullable) = true];
}

// QueryFundResponse defines the response for querying a specific fund
message QueryFundResponse {
  cosmos.airdrop.v1beta1.Fund fund = 1;
}

// QueryParamsRequest defines the request type for querying x/airdrop parameters.
message QueryParamsRequest {}

// QueryParamsResponse defines the response type for querying x/airdrop parameters.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}
