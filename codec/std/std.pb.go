// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: codec/std/std.proto

package std

import (
	fmt "fmt"
	types2 "github.com/cosmos/cosmos-sdk/x/distribution/types"
	github_com_cosmos_cosmos_sdk_x_gov_types "github.com/cosmos/cosmos-sdk/x/gov/types"
	types "github.com/cosmos/cosmos-sdk/x/gov/types"
	proposal "github.com/cosmos/cosmos-sdk/x/params/types/proposal"
	types1 "github.com/cosmos/cosmos-sdk/x/upgrade/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StdProposal struct {
	types.ProposalBase `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:"base"`
	Content            StdProposal_Content `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
}

func (m *StdProposal) Reset()         { *m = StdProposal{} }
func (m *StdProposal) String() string { return proto.CompactTextString(m) }
func (*StdProposal) ProtoMessage()    {}
func (*StdProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf2c6f71a73b14, []int{0}
}
func (m *StdProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdProposal.Merge(m, src)
}
func (m *StdProposal) XXX_Size() int {
	return m.Size()
}
func (m *StdProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_StdProposal.DiscardUnknown(m)
}

var xxx_messageInfo_StdProposal proto.InternalMessageInfo

func (m *StdProposal) GetContent() StdProposal_Content {
	if m != nil {
		return m.Content
	}
	return StdProposal_Content{}
}

type StdProposal_Content struct {
	// Types that are valid to be assigned to Sum:
	//	*StdProposal_Content_Text
	//	*StdProposal_Content_ParameterChange
	//	*StdProposal_Content_SoftwareUpgrade
	//	*StdProposal_Content_CancelSoftwareUpgrade
	//	*StdProposal_Content_CommunityPoolSpend
	Sum isStdProposal_Content_Sum `protobuf_oneof:"sum"`
}

func (m *StdProposal_Content) Reset()         { *m = StdProposal_Content{} }
func (m *StdProposal_Content) String() string { return proto.CompactTextString(m) }
func (*StdProposal_Content) ProtoMessage()    {}
func (*StdProposal_Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf2c6f71a73b14, []int{0, 0}
}
func (m *StdProposal_Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdProposal_Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdProposal_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdProposal_Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdProposal_Content.Merge(m, src)
}
func (m *StdProposal_Content) XXX_Size() int {
	return m.Size()
}
func (m *StdProposal_Content) XXX_DiscardUnknown() {
	xxx_messageInfo_StdProposal_Content.DiscardUnknown(m)
}

var xxx_messageInfo_StdProposal_Content proto.InternalMessageInfo

type isStdProposal_Content_Sum interface {
	isStdProposal_Content_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StdProposal_Content_Text struct {
	Text *types.TextProposal `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type StdProposal_Content_ParameterChange struct {
	ParameterChange *proposal.ParameterChangeProposal `protobuf:"bytes,2,opt,name=parameter_change,json=parameterChange,proto3,oneof" json:"parameter_change,omitempty"`
}
type StdProposal_Content_SoftwareUpgrade struct {
	SoftwareUpgrade *types1.SoftwareUpgradeProposal `protobuf:"bytes,3,opt,name=software_upgrade,json=softwareUpgrade,proto3,oneof" json:"software_upgrade,omitempty"`
}
type StdProposal_Content_CancelSoftwareUpgrade struct {
	CancelSoftwareUpgrade *types1.CancelSoftwareUpgradeProposal `protobuf:"bytes,4,opt,name=cancel_software_upgrade,json=cancelSoftwareUpgrade,proto3,oneof" json:"cancel_software_upgrade,omitempty"`
}
type StdProposal_Content_CommunityPoolSpend struct {
	CommunityPoolSpend *types2.CommunityPoolSpendProposal `protobuf:"bytes,5,opt,name=community_pool_spend,json=communityPoolSpend,proto3,oneof" json:"community_pool_spend,omitempty"`
}

func (*StdProposal_Content_Text) isStdProposal_Content_Sum()                  {}
func (*StdProposal_Content_ParameterChange) isStdProposal_Content_Sum()       {}
func (*StdProposal_Content_SoftwareUpgrade) isStdProposal_Content_Sum()       {}
func (*StdProposal_Content_CancelSoftwareUpgrade) isStdProposal_Content_Sum() {}
func (*StdProposal_Content_CommunityPoolSpend) isStdProposal_Content_Sum()    {}

func (m *StdProposal_Content) GetSum() isStdProposal_Content_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *StdProposal_Content) GetText() *types.TextProposal {
	if x, ok := m.GetSum().(*StdProposal_Content_Text); ok {
		return x.Text
	}
	return nil
}

func (m *StdProposal_Content) GetParameterChange() *proposal.ParameterChangeProposal {
	if x, ok := m.GetSum().(*StdProposal_Content_ParameterChange); ok {
		return x.ParameterChange
	}
	return nil
}

func (m *StdProposal_Content) GetSoftwareUpgrade() *types1.SoftwareUpgradeProposal {
	if x, ok := m.GetSum().(*StdProposal_Content_SoftwareUpgrade); ok {
		return x.SoftwareUpgrade
	}
	return nil
}

func (m *StdProposal_Content) GetCancelSoftwareUpgrade() *types1.CancelSoftwareUpgradeProposal {
	if x, ok := m.GetSum().(*StdProposal_Content_CancelSoftwareUpgrade); ok {
		return x.CancelSoftwareUpgrade
	}
	return nil
}

func (m *StdProposal_Content) GetCommunityPoolSpend() *types2.CommunityPoolSpendProposal {
	if x, ok := m.GetSum().(*StdProposal_Content_CommunityPoolSpend); ok {
		return x.CommunityPoolSpend
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StdProposal_Content) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StdProposal_Content_Text)(nil),
		(*StdProposal_Content_ParameterChange)(nil),
		(*StdProposal_Content_SoftwareUpgrade)(nil),
		(*StdProposal_Content_CancelSoftwareUpgrade)(nil),
		(*StdProposal_Content_CommunityPoolSpend)(nil),
	}
}

func init() {
	proto.RegisterType((*StdProposal)(nil), "cosmos_sdk.x.v1.StdProposal")
	proto.RegisterType((*StdProposal_Content)(nil), "cosmos_sdk.x.v1.StdProposal.Content")
}

func init() { proto.RegisterFile("codec/std/std.proto", fileDescriptor_bfdf2c6f71a73b14) }

var fileDescriptor_bfdf2c6f71a73b14 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x13, 0x96, 0x32, 0xe4, 0x1d, 0x36, 0x05, 0xd0, 0xaa, 0x22, 0x65, 0xe3, 0x8f, 0x26,
	0x24, 0x34, 0x7b, 0x03, 0x04, 0x88, 0x0b, 0xa8, 0xe5, 0xc0, 0x71, 0xea, 0xe0, 0x82, 0x40, 0x91,
	0x6b, 0x9b, 0x34, 0x5a, 0x92, 0xd7, 0x8a, 0x9d, 0x92, 0x7e, 0x0b, 0x3e, 0x00, 0xdf, 0x02, 0x3e,
	0xc4, 0xc4, 0xa9, 0x47, 0x4e, 0x13, 0x6a, 0xbf, 0x08, 0xaa, 0xe3, 0x8c, 0x64, 0xdd, 0x76, 0x68,
	0x95, 0xf8, 0x7d, 0x9e, 0xdf, 0x63, 0xbf, 0xf1, 0x8b, 0x6e, 0x33, 0xe0, 0x82, 0x11, 0xa5, 0xf9,
	0xf2, 0x87, 0x65, 0x0e, 0x1a, 0xfc, 0x4d, 0x06, 0x2a, 0x05, 0x15, 0x2a, 0x7e, 0x82, 0x4b, 0x3c,
	0x39, 0xec, 0x3d, 0xd1, 0xe3, 0x38, 0xe7, 0xa1, 0xa4, 0xb9, 0x9e, 0x12, 0xa3, 0x21, 0x95, 0x64,
	0xbf, 0xf9, 0x52, 0xb9, 0x7b, 0x7b, 0xab, 0xe2, 0x08, 0x22, 0xf8, 0xff, 0x64, 0x75, 0xdb, 0x25,
	0x89, 0x60, 0x42, 0xf4, 0x54, 0x0a, 0x55, 0xfd, 0xdb, 0xc2, 0xc3, 0x92, 0x48, 0x9a, 0xd3, 0xd4,
	0xae, 0x2e, 0x19, 0x12, 0x14, 0x4d, 0x5a, 0xa2, 0x7b, 0x25, 0x29, 0x64, 0x94, 0x53, 0x2e, 0x2e,
	0x21, 0xec, 0x96, 0x84, 0xc7, 0x4a, 0xe7, 0xf1, 0xa8, 0xd0, 0x31, 0x64, 0xab, 0x8a, 0x07, 0x3f,
	0x3b, 0x68, 0xe3, 0x58, 0xf3, 0x23, 0x8b, 0xf6, 0xdf, 0x20, 0x6f, 0x44, 0x95, 0xe8, 0xba, 0xbb,
	0xee, 0xe3, 0x8d, 0xa7, 0xf7, 0x71, 0xab, 0x03, 0x11, 0x4c, 0xf0, 0xe4, 0x10, 0xd7, 0xe2, 0x3e,
	0x55, 0xa2, 0x7f, 0xeb, 0xf4, 0x6c, 0xc7, 0x99, 0x9d, 0xed, 0xb8, 0x43, 0x63, 0xf4, 0xdf, 0xa1,
	0x75, 0x06, 0x99, 0x16, 0x99, 0xee, 0xde, 0x30, 0x8c, 0x47, 0xf8, 0x42, 0x17, 0x71, 0x23, 0x0f,
	0x0f, 0x2a, 0x6d, 0xdf, 0x5b, 0x62, 0x86, 0xb5, 0xb5, 0xf7, 0xc3, 0x43, 0xeb, 0xb6, 0xe4, 0xbf,
	0x44, 0x9e, 0x16, 0xa5, 0xbe, 0x76, 0x4b, 0x1f, 0x44, 0xa9, 0x6b, 0xe6, 0x7b, 0x67, 0x68, 0x0c,
	0xfe, 0x67, 0xb4, 0x65, 0xfa, 0x27, 0xb4, 0xc8, 0x43, 0x36, 0xa6, 0x59, 0x24, 0xec, 0x9e, 0x48,
	0x1b, 0x52, 0x75, 0xd9, 0x1c, 0xad, 0xd6, 0x0f, 0x8c, 0xbc, 0x81, 0xdc, 0x94, 0xed, 0x92, 0xff,
	0x05, 0x6d, 0x29, 0xf8, 0xaa, 0xbf, 0xd1, 0x5c, 0x84, 0xf6, 0x0b, 0x74, 0xd7, 0x0c, 0xfd, 0xa0,
	0x4d, 0xb7, 0x45, 0x73, 0x72, 0x6b, 0xf8, 0x58, 0x2d, 0x35, 0xf1, 0xaa, 0x5d, 0xf2, 0x25, 0xda,
	0x66, 0x34, 0x63, 0x22, 0x09, 0x57, 0x52, 0x3c, 0x93, 0xf2, 0xe2, 0xca, 0x94, 0x81, 0xf1, 0x5d,
	0x9d, 0x75, 0x97, 0x5d, 0x26, 0xf0, 0x13, 0x74, 0x87, 0x41, 0x9a, 0x16, 0x59, 0xac, 0xa7, 0xa1,
	0x04, 0x48, 0x42, 0x25, 0x45, 0xc6, 0xbb, 0x1d, 0x13, 0xf7, 0xaa, 0x1d, 0xd7, 0xbc, 0x56, 0x26,
	0xb3, 0x76, 0x1e, 0x01, 0x24, 0xc7, 0x4b, 0x5f, 0x23, 0xd0, 0x67, 0x2b, 0xd5, 0xd7, 0xcf, 0x7f,
	0xff, 0xda, 0x3f, 0x88, 0x62, 0x3d, 0x2e, 0x46, 0x98, 0x41, 0x6a, 0x47, 0xa7, 0x1e, 0x27, 0xc5,
	0x4f, 0x48, 0x63, 0x2c, 0xce, 0xaf, 0x49, 0x07, 0xad, 0xa9, 0x22, 0xed, 0xbf, 0x3d, 0x9d, 0x07,
	0xee, 0x6c, 0x1e, 0xb8, 0x7f, 0xe7, 0x81, 0xfb, 0x7d, 0x11, 0x38, 0xb3, 0x45, 0xe0, 0xfc, 0x59,
	0x04, 0xce, 0xa7, 0xbd, 0x6b, 0x91, 0xe7, 0x43, 0x3e, 0xba, 0x69, 0xae, 0xff, 0xb3, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x48, 0xf7, 0x0e, 0xf8, 0x03, 0x00, 0x00,
}

func (this *StdProposal_Content) GetContent() github_com_cosmos_cosmos_sdk_x_gov_types.Content {
	if x := this.GetText(); x != nil {
		return x
	}
	if x := this.GetParameterChange(); x != nil {
		return x
	}
	if x := this.GetSoftwareUpgrade(); x != nil {
		return x
	}
	if x := this.GetCancelSoftwareUpgrade(); x != nil {
		return x
	}
	if x := this.GetCommunityPoolSpend(); x != nil {
		return x
	}
	return nil
}

func (this *StdProposal_Content) SetContent(value github_com_cosmos_cosmos_sdk_x_gov_types.Content) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.TextProposal:
		this.Sum = &StdProposal_Content_Text{vt}
		return nil
	case types.TextProposal:
		this.Sum = &StdProposal_Content_Text{&vt}
		return nil
	case *proposal.ParameterChangeProposal:
		this.Sum = &StdProposal_Content_ParameterChange{vt}
		return nil
	case proposal.ParameterChangeProposal:
		this.Sum = &StdProposal_Content_ParameterChange{&vt}
		return nil
	case *types1.SoftwareUpgradeProposal:
		this.Sum = &StdProposal_Content_SoftwareUpgrade{vt}
		return nil
	case types1.SoftwareUpgradeProposal:
		this.Sum = &StdProposal_Content_SoftwareUpgrade{&vt}
		return nil
	case *types1.CancelSoftwareUpgradeProposal:
		this.Sum = &StdProposal_Content_CancelSoftwareUpgrade{vt}
		return nil
	case types1.CancelSoftwareUpgradeProposal:
		this.Sum = &StdProposal_Content_CancelSoftwareUpgrade{&vt}
		return nil
	case *types2.CommunityPoolSpendProposal:
		this.Sum = &StdProposal_Content_CommunityPoolSpend{vt}
		return nil
	case types2.CommunityPoolSpendProposal:
		this.Sum = &StdProposal_Content_CommunityPoolSpend{&vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message StdProposal_Content", value)
}

func (m *StdProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStd(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ProposalBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStd(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StdProposal_Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdProposal_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StdProposal_Content_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal_Content_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StdProposal_Content_ParameterChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal_Content_ParameterChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ParameterChange != nil {
		{
			size, err := m.ParameterChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StdProposal_Content_SoftwareUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal_Content_SoftwareUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SoftwareUpgrade != nil {
		{
			size, err := m.SoftwareUpgrade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StdProposal_Content_CancelSoftwareUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal_Content_CancelSoftwareUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelSoftwareUpgrade != nil {
		{
			size, err := m.CancelSoftwareUpgrade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *StdProposal_Content_CommunityPoolSpend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdProposal_Content_CommunityPoolSpend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommunityPoolSpend != nil {
		{
			size, err := m.CommunityPoolSpend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintStd(dAtA []byte, offset int, v uint64) int {
	offset -= sovStd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StdProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalBase.Size()
	n += 1 + l + sovStd(uint64(l))
	l = m.Content.Size()
	n += 1 + l + sovStd(uint64(l))
	return n
}

func (m *StdProposal_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *StdProposal_Content_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovStd(uint64(l))
	}
	return n
}
func (m *StdProposal_Content_ParameterChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParameterChange != nil {
		l = m.ParameterChange.Size()
		n += 1 + l + sovStd(uint64(l))
	}
	return n
}
func (m *StdProposal_Content_SoftwareUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoftwareUpgrade != nil {
		l = m.SoftwareUpgrade.Size()
		n += 1 + l + sovStd(uint64(l))
	}
	return n
}
func (m *StdProposal_Content_CancelSoftwareUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelSoftwareUpgrade != nil {
		l = m.CancelSoftwareUpgrade.Size()
		n += 1 + l + sovStd(uint64(l))
	}
	return n
}
func (m *StdProposal_Content_CommunityPoolSpend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommunityPoolSpend != nil {
		l = m.CommunityPoolSpend.Size()
		n += 1 + l + sovStd(uint64(l))
	}
	return n
}

func sovStd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStd(x uint64) (n int) {
	return sovStd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StdProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdProposal_Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.TextProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &StdProposal_Content_Text{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &proposal.ParameterChangeProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &StdProposal_Content_ParameterChange{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareUpgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.SoftwareUpgradeProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &StdProposal_Content_SoftwareUpgrade{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSoftwareUpgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.CancelSoftwareUpgradeProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &StdProposal_Content_CancelSoftwareUpgrade{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolSpend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types2.CommunityPoolSpendProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &StdProposal_Content_CommunityPoolSpend{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStd = fmt.Errorf("proto: unexpected end of group")
)
